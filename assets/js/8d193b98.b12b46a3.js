"use strict";(self.webpackChunkoperator_for_redis_cluster=self.webpackChunkoperator_for_redis_cluster||[]).push([[357],{6273:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"CONTRIBUTING","title":"Contributing","description":"Set up your machine","source":"@site/docs/CONTRIBUTING.md","sourceDirName":".","slug":"/contributing","permalink":"/operator-for-redis-cluster/contributing","draft":false,"unlisted":false,"editUrl":"https://cin.github.io/operator-for-redis-cluster/docs/CONTRIBUTING.md","tags":[],"version":"current","lastUpdatedAt":1748553358000,"frontMatter":{"title":"Contributing","slug":"/contributing"},"sidebar":"docs","previous":{"title":"Key Migration","permalink":"/operator-for-redis-cluster/key-migration"}}');var r=t(4848),s=t(8453);const i={title:"Contributing",slug:"/contributing"},c="Contributing",l={},d=[{value:"Set up your machine",id:"set-up-your-machine",level:2},{value:"Development process",id:"development-process",level:2},{value:"Create a branch",id:"create-a-branch",level:3},{value:"Commit your code",id:"commit-your-code",level:3},{value:"End-to-end tests",id:"end-to-end-tests",level:3},{value:"Submit a pull request",id:"submit-a-pull-request",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,r.jsx)(n.h2,{id:"set-up-your-machine",children:"Set up your machine"}),"\n",(0,r.jsxs)(n.p,{children:["Refer to our ",(0,r.jsx)(n.a,{href:"/operator-for-redis-cluster/cookbook#installation",children:"cookbook"})," to learn how to set up your machine."]}),"\n",(0,r.jsx)(n.h2,{id:"development-process",children:"Development process"}),"\n",(0,r.jsx)(n.p,{children:"This section assumes you have already set up your environment to build and install the Redis operator and cluster."}),"\n",(0,r.jsx)(n.h3,{id:"create-a-branch",children:"Create a branch"}),"\n",(0,r.jsxs)(n.p,{children:["The first step to contributing is creating a branch off of the ",(0,r.jsx)(n.code,{children:"main"})," branch in your forked project. Branch names should be well formatted. Start your branch name with a type. Choose one of the following:\n",(0,r.jsx)(n.code,{children:"feat"}),", ",(0,r.jsx)(n.code,{children:"fix"}),", ",(0,r.jsx)(n.code,{children:"bug"}),", ",(0,r.jsx)(n.code,{children:"docs"}),", ",(0,r.jsx)(n.code,{children:"style"}),", ",(0,r.jsx)(n.code,{children:"refactor"}),", ",(0,r.jsx)(n.code,{children:"perf"}),", ",(0,r.jsx)(n.code,{children:"test"}),", ",(0,r.jsx)(n.code,{children:"add"}),", ",(0,r.jsx)(n.code,{children:"remove"}),", ",(0,r.jsx)(n.code,{children:"move"}),", ",(0,r.jsx)(n.code,{children:"bump"}),", ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"release"})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"$ git checkout -b feat/node-scaling\n"})}),"\n",(0,r.jsx)(n.h3,{id:"commit-your-code",children:"Commit your code"}),"\n",(0,r.jsx)(n.p,{children:"Make your desired changes to the branch and then commit your work:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'$ git add .\n$ git commit -m "<USEFUL_MESSAGE>"\n$ git push --set-upstream origin <BRANCH_NAME>\n'})}),"\n",(0,r.jsx)(n.p,{children:"When you are ready to make a pull request, we suggest you run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'$ make generate\n//path/to/go/bin/controller-gen object paths="./..."\n$ make fmt\nfind . -name \'*.go\' -not -wholename \'./vendor/*\' | while read -r file; do gofmt -w -s "$file"; goimports -w "$file"; done\n$ make lint\ngolangci-lint run --enable copyloopvar\n$ make test\n./go.test.sh\n...\n'})}),"\n",(0,r.jsx)(n.p,{children:"These steps will:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Regenerate the RedisCluster CRD"}),"\n",(0,r.jsxs)(n.li,{children:["Format the code according to ",(0,r.jsx)(n.code,{children:"gofmt"})," standards"]}),"\n",(0,r.jsx)(n.li,{children:"Run the linter"}),"\n",(0,r.jsx)(n.li,{children:"Run the unit tests"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"end-to-end-tests",children:"End-to-end tests"}),"\n",(0,r.jsxs)(n.p,{children:["To run the end-to-end tests, you need to have a running Kubernetes cluster. Follow the steps in the ",(0,r.jsx)(n.a,{href:"/operator-for-redis-cluster/cookbook#run-end-to-end-tests",children:"cookbook"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"submit-a-pull-request",children:"Submit a pull request"}),"\n",(0,r.jsxs)(n.p,{children:["Push your branch to your ",(0,r.jsx)(n.code,{children:"redis-operator"})," fork and open a pull request against the ",(0,r.jsx)(n.code,{children:"main"})," branch in the official project. When you open a PR, be sure to include a description explaining your changes, as well as"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Resolves #<ISSUE_NUMBER>\n"})}),"\n",(0,r.jsx)(n.p,{children:"We also ask that you add labels describing the t-shirt size of the task (S, M, L, XL) and the task type (enhancement, documentation, bug, etc.)."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);